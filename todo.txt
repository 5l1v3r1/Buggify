***NEW FEATURES***
-Grammar mode
	-Allows for automatic inputting of Grammar, spelling and punctuation errors 
	 geared more towards education
-Programming Language specific bugs 
	-Possible abstraction of functions to be more customizable based on the language
	-Automatically detect language based on file extension
		
***ISSUES***
-Must test with various file types to anticipate errors with bugs not 
 able to be applied. For example, what if a text file doesn't contain triple quotes -
 ''' , how will it react?
-Functions are inconsistent regarding how many times they run 
	-Some functions exit without executing since they don't fulfill all conditionals
	-Ideally, all functions should not exit without executing once
		-Consider a case where a function does not apply to any of the lines in the file
		-"bugged_docstring" would result in an infinite loop if 
		 there are no docstrings in the file
		-Thus for consistency, if a function CAN apply to a file, 
		 it should execute once before exiting	

***BUG FUNCTION IDEAS***
-Insert charachter at random point in the line
	-Duplicate the charachter?
-Replace Break with Continue and vice versae
-Turn function Return into print statement

***TESTING***
from Buggify import buggify
import os

list_of_files = []
for root, subfolders, files in os.walk('C:\\Users\\roovy.q\\Documents\\<Directory Name>'):
    for file in files:
        path = os.path.join(root, file)
        filepath = os.path.abspath(path)
        if "git\\" not in filepath:
            list_of_files.append(filepath)

def test_buggify(list_of_files):
    for file in list_of_files:
        print(file)
        buggify(file, 500)
        
test_buggify(list_of_files)
