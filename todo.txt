***NEW FEATURES***
-Grammar mode
	-Allows for automatic inputting of Grammar, spelling and punctuation errors 
	 geared more towards education
-Programming Language specific bugs 
	-Possible abstraction of functions to be more customizable based on the language
	-Automatically detect language based on file extension
-Add documentation with some examples for how to run Buggify().
	-To run Buggify on every file in the current directory with 20 Bugs:
		->>>import os, Buggify
		 >>>files = [file for file in os.listdir('.') if os.path.isfile(file)]
		 >>>for file in files:
		 >>>    Buggify.buggify(file, 20)
	-To run Buggify on every file in the current directory and its subfolders.
		>>>import os, Buggify
		>>>myfiles = []
		>>>for root, subfolders, files in os.walk("."):
		>>>    for file in files:
		>>>        path = os.path.join(root, file)
		>>>        filepath = os.path.abspath(path)
		>>>        myfiles.append(filepath)
		>>>
		>>>for file in myfiles:
		>>>    Buggify.buggify(file)
		
***ISSUES***
-Must test with various file types to anticipate errors with bugs not 
 able to be applied. For example, what if a text file doesn't contain triple quotes -
 ''' , how will it react?
-Functions are inconsistent regarding how many times they run 
	-Some functions exit without executing since they don't fulfill all conditionals
	-Ideally, all functions should not exit without executing once
		-Consider a case where a function does not apply to any of the lines in the file
		-"bugged_docstring" would result in an infinite loop if 
		 there are no docstrings in the file
		-Thus for consistency, if a function CAN apply to a file, 
		 it should execute once before exiting	

***BUG FUNCTION IDEAS***
-Insert charachter at random point in the line
	-Duplicate the charachter?
