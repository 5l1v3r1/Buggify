***NEW FEATURES***
--Grammar mode
	-Allows for automatic inputting of Grammar, spelling and punctuation errors 
	 geared more towards education

--Programming Language specific bugs 
	-Possible abstraction of functions to be more customizable based on the language
	-Automatically detect language based on file extension

--Create a GUI for the program that allows custom bugs to be put into the program
	-This could be acomplished by using checkboxes on a GUI, a check box for every type of bug, and an easier way to choose files.

--Give the option to specify the destination folder for where the buggified documents get sent.
  Currently, it can't be chosen. We need to determine where it's being sent and if the default should change.
	
	
***ISSUES***
--Must test with various file types to anticipate errors with bugs not 
  able to be applied. For example, what if a text file doesn't contain triple quotes -
  ''' , how will it react?
 
--Functions are inconsistent regarding how many times they run 
	-Some functions exit without executing since they don't fulfill all conditionals
	-Ideally, all functions should not exit without executing once
		-Consider a case where a function does not apply to any of the lines in the file
		-"bugged_docstring" would result in an infinite loop if 
		 there are no docstrings in the file
		-Thus for consistency, if a function CAN apply to a file, 
		 it should execute once before exiting	

--missing_blanks() might be called on too much. Perhaps it needs a random element to make it apply less.
  I think this issue is included in the one where functions are inconsistent regarding how many times they are run.
 
--buggify_docstring() needs to be analyzed as it may contain an error.
  Currently, buggify_docstring() is only designed to work if docstrings have triple quotes on multiple lines. 
  For instance, this will work:
  def testfunction():
	''''
	Some Text Here:
	''''
  However, if there are docstrings like this, the whole function won't work.
  def testfunction:
	''''Some Text Here''''
  That is because there needs to be an even amount of lines with triple quotes. 
  The list of lines with triple quotes gets split up into   two lists:
  one is the beginning of the docstrings, one is the end.
  Is there a better way to detect docstrings?


***NEW BUG IDEAS***
--Replace Break with Continue and vice versae
--Turn function Return into print statement
